#!/usr/bin/env python
# -*- coding: utf-8 -*-

import distutils.sysconfig
import os
import sys

# This is a list of 1- or 2-tuples. The first element is the name of
# the source file (less the .cpp extension) and is also used as the
# binary name. The second element (if it exists) is a list of
# additional files for the extractor
example_sources = [
        ('standard_beatsmarker', ),
        ('standard_mfcc', ),
        ('standard_onsetrate', ),
        ('standard_pitchyinfft', ),
        ('standard_fadedetection', ),
        ('standard_spectralcontrast', ),
        ('standard_rhythmtransform', ),

        ('streaming_extractor',
                 [ 'streaming_extractorutils',
                   'streaming_extractortonal',
                   'streaming_extractorlowlevel',
                   'streaming_extractorbeattrack',
                   'streaming_extractorsfx',
                   'streaming_extractorpanning',
                   'streaming_extractorpostprocess' ]),

        ('streaming_extractor_short_sounds',
                 [ 'streaming_extractorutils',
                   'streaming_extractormetadata',
                   'streaming_extractortonal',
                   'streaming_extractorlowlevel',
                   'streaming_extractorsfx',
                   'streaming_extractorpanning',
                   'streaming_extractorpostprocess' ]),

        ('streaming_extractor_music',
                 [ 'extractor_music/MusicExtractor',
                   'extractor_music/MusicLowlevelDescriptors',
                   'extractor_music/MusicRhythmDescriptors',
                   'extractor_music/MusicTonalDescriptors' ]),
        
        ('streaming_beatsmarker', ),
        ('streaming_mfcc', ),
        ('streaming_gfcc', ),
        ('streaming_rhythmextractor_multifeature', ),
        ('streaming_beattracker_multifeature_mirex2013', ),
        ('streaming_onsetrate', ),
        ('streaming_panning', ),
        ('streaming_tuningfrequency', ),
        ('streaming_key', ),
        ('streaming_pitchyinfft', ),
        ('streaming_predominantmelody', ),
        ('streaming_md5', ),

        ('streaming_extractor_freesound',
                 [ 'freesound/FreesoundExtractor',
                   'freesound/FreesoundLowlevelDescriptors',
                   'freesound/FreesoundRhythmDescriptors',
                   'freesound/FreesoundTonalDescriptors',
                   'freesound/FreesoundSfxDescriptors' ])
]

example_sources_with_gaia = [
        ('streaming_extractor_music_svm',
                 [ 'extractor_music/MusicExtractor',
                   'extractor_music/MusicLowlevelDescriptors',
                   'extractor_music/MusicRhythmDescriptors',
                   'extractor_music/MusicTonalDescriptors' ])
]

def configure(ctx):
    example_list = [p[0] for p in example_sources]
    example_list_gaia = [p[0] for p in example_sources_with_gaia]

    if "HAVE_GAIA2" in ctx.env['define_key']:
        example_list += example_list_gaia

    if ctx.env.WITH_EXAMPLES:
        ctx.env.EXAMPLE_LIST = example_list

    if ctx.env.EXAMPLES:
        for e in ctx.env.EXAMPLES.split(","):
            e = e.strip()
            if e not in example_list and e in example_list_gaia:
                raise ctx.errors.ConfigurationError("Specified example [%s] cannot be included because Gaia2 is missing" % e)
            elif e not in example_list:
                raise ctx.errors.ConfigurationError("Specified example [%s] does not exist" % e)
            ctx.env.EXAMPLE_LIST.append(e)

    if ctx.env.WITH_STATIC_EXAMPLES:
        if sys.platform != 'darwin':
            # skip -static flag on OSX, otherwise it will complain because 
            # static linking to system libraries is not supported on OSX
            ctx.env.LINKFLAGS = ['-static']
            ctx.env.SHLIB_MARKER = '-Wl,-Bstatic'

        ctx.env.LIB = [ 'avformat', 'avcodec', 'avutil', 'tag' ]
        
        if "HAVE_GAIA2" in ctx.env['define_key']:
            ctx.env.LIB += [ 'gaia2' ]    
            ctx.env['LIB_GAIA2'] += [ 'dl' ] # -ldl is required when building with static QtCore
       
        if ctx.options.CROSS_COMPILE_MINGW32:
            # otherwise the __imp__ symbols will be expected at link time 
            ctx.env.CXXFLAGS += ['-DYAML_DECLARE_STATIC', '-DTAGLIB_STATIC']


def build(ctx):
    print('â†’ building from ' + ctx.path.abspath())
    
    if len(ctx.env.EXAMPLE_LIST):
        def build_example(prog_name, other=None):
            files = ['%s.cpp' % f for f in [prog_name] + (other or [])]

            # If an `other` program has files in a directory we need
            # to add an aditional includes
            includes = [ '.', '..' ]
            if any((len(x.split("/")) > 1 for x in other or [])):
                includes.append("../..")

            ctx.program(source  = ctx.path.ant_glob(' '.join(files)),
                        target  = prog_name,
                        includes = includes,
                        use      = 'essentia ' + ctx.env.USES,
                        install_path = None)

        for e in example_sources + example_sources_with_gaia:
            if e[0] in ctx.env.EXAMPLE_LIST:
                if len(e) == 1:
                    build_example(e[0])
                elif len(e) == 2:
                    build_example(e[0], e[1])


    if ctx.env.WITH_VAMP:
        ctx.env.INCLUDES += [ '3rdparty/vamp-plugin-sdk-2.4' ]

        vamp_sdk_files   = ctx.path.parent.ant_glob('3rdparty/vamp-plugin-sdk-2.4/src/vamp-sdk/*.cpp')
        # remove this file, it is already included by FFT.cpp
        vamp_sdk_files = [ f for f in vamp_sdk_files if os.path.basename(f.srcpath()) != 'FFTimpl.cpp' ]

        if sys.platform == 'darwin':
            install_path = os.environ['HOME'] + '/Library/Audio/Plug-Ins/Vamp'
        else:
            install_path = None

        vamp = ctx.shlib(
            source   = ctx.path.ant_glob('vamp*.cpp') + vamp_sdk_files,
            target   = 'vamp_essentia',
            includes = [ '.', '..', '../3rdparty/vamp-plugin-sdk-2.4' ],
            use      = 'essentia ' + ctx.env.USES,
            install_path = install_path
        )
